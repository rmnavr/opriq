
; TODO ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\ {{{1

    ; - not enough unpress for Tab
    ; - not enough unpress for remap_down/up on all layers
    ; - reloading issues

; _____________________________________________________________________________/ }}}1

; === Setup ===

; App startup (send mods up) ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\ {{{1

    Send "{RAlt Up}{Shift Up}{Ctrl Up}"

; _____________________________________________________________________________/ }}}1
; Configs, Variables, Classes ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\ {{{1

    ; User setup:

		show_gui             := True

        single_tap_time_gap  := 250
        alarm_2h_time_window := -1000
		chords_time_window   := -25

    ; Dev setup:

		A_MaxHotkeysPerInterval := 9999

        KB_Layers := {Error: 0, Home: 1, Text2: 2, Text2withAlt: 3, Navi: 4, Symbols: 5}
        right_KB_half_recently_active := False

		chords_keysPressed := [False, False, False]
		chords_gatheringPhase := 0
		; variables below are to provide autorepeat for chords
		start_sleep := 100 
		end_sleep   := 30
		step_sleep  := 10

; _____________________________________________________________________________/ }}}1
; [GUI] Declare ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\ {{{1

    gui_main := Gui()
    gui_main.Opt("+E0x20 -Caption +AlwaysOnTop +LastFound -MaximizeBox +ToolWindow") 
	WinSetTransparent(120) ; finds GUI due to «LastFound»

	screen_width  := A_ScreenWidth
	screen_height := A_ScreenHeight

	; 1h/2h visualization:
	gui_2h_TextL    := gui_main.AddButton(  "x00 y00 w20 h20"              , "  ")
    gui_2hAlarmL    := gui_main.AddProgress("x02 y02 w16 h16 cBlue"        ,  100)
	gui_2h_TextR    := gui_main.AddButton(  "x20 y00 w20 h20"              , "1h")
    gui_2hAlarmR    := gui_main.AddProgress("x22 y02 w16 h16 cRed Hidden"  ,  100)

	; App status vis:
	gui_ModeLabel   := gui_main.AddText(    "x04 y25 w30"                  , "OPRIQ")

	if (show_gui) {
		gui_main.Show("xCenter NoActivate w41 Y" . (screen_height - 75))
	}

; _____________________________________________________________________________/ }}}1
; [GUI] Visualization [F] ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\ {{{1

	guiF_visualise_1h() {
		global
		gui_2hAlarmR.Visible := False
	}

	guiF_visualise_2h() {
		global
		gui_2hAlarmR.Visible := True
	}

	guiF_visualise_susp() {
		global
		gui_ModeLabel.Value := "↓susp↓"
		gui_2h_TextR.Text := ""
		gui_2hAlarmL.Visible := False
	}

	guiF_visualise_unsusp() {
		global
		gui_2hAlarmL.Visible := True
		gui_ModeLabel.Value := "OPRIQ"
		gui_2h_TextR.Text := "1h"
	}

; _____________________________________________________________________________/ }}}1
; [GUI] Utils [F] ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\ {{{1

	; currently UNUSED
	; Integer -> String
	kb_layer_to_String(n)
	{
        Switch n {
            case 0:   outp := "---"
            case 1:   outp := "Home"
            case 2:   outp := "Text2"
            case 3:   outp := "Text2A"
            case 4:   outp := "Navi"
            case 5:   outp := "Symbols"
            default:  outp := "---"
		}
		return outp
	}

; _____________________________________________________________________________/ }}}1

; [Hotkeys] AppControlls, Mouse, «CapsLock» ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\ {{{1

#SuspendExempt

    *$CapsLock::LCtrl

    *$XButton1::MButton
    *$XButton2::Return

    #HotIf GetKeyState("XButton2","P")=1
        MButton::Media_Play_Pause
        WheelUp::Volume_Up
        WheelDown::Volume_Down
    #HotIf

    #HotIf GetKeyState("XButton1","P")=1
        WheelUp::WheelRight
        WheelDown::WheelLeft
    #HotIf

    *$#F1:: {
		guiF_visualise_susp()
        Suspend 1
        SoundBeep 580, 100
        SoundBeep 340, 100
    }

    *$#F2:: {
		guiF_visualise_unsusp()
        Suspend 0
        SoundBeep 340, 100
        SoundBeep 580, 100
    }

    *$#F3::Reload ; this hotkey will fire Window-key if it is released after F3

    *$#F6::get_pressed_keys_info()

#SuspendExempt False

; _____________________________________________________________________________/ }}}1
; [F] get_pressed_keys_info ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\ {{{1

; ■ names ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\ {{{2

    all_keys_names := [
         "F1"   ,"F2"   ,"F3"   ,"F4"   ,"F5"   ,"F6"   ,"F7"   ,"F8"   ,"F9"   ,"F10"  ,"F11"  ,"F12"
        ,"BS"   ,"Tab"  ,"Enter","Esc"  ,"Space","Del"  ,"Home" ,"End"  ,"PgUp" ,"PgDn" ,"AppsKey"
        ,"Alt"  ,"RAlt" ,"LAlt" ,"Ctrl" ,"LCtrl","RCtrl","LWin" ,"RWin" ,"Shift","LShift" ,"RShift"
        ,"``"   ,"1"    ,"2"    ,"3"    ,"4"    ,"5"    ,"6"    ,"7"    ,"8"    ,"9"    ,"0"    ,"-"    ,"="
        ,"q"    ,"w"    ,"e"    ,"r"    ,"t"    ,"y"    ,"u"    ,"i"    ,"o"    ,"p"    ,"["    ,"]"    ,"\"
        ,"a"    ,"s"    ,"d"    ,"f"    ,"g"    ,"h"    ,"j"    ,"k"    ,"l"    ,"`;"   ,"'"
        ,"z"    ,"x"    ,"c"    ,"v"    ,"b"    ,"n"    ,"m"    ,","    ,"."    ,"/"
        , "Volume_Down", "Volume_Up", "Media_Play_Pause"
    ]

; ________________________________________________________________________/ }}}2

    get_pressed_keys_info()
    {
    global
    local physical, logical, tmp
        physical := ""
        logical  := ""
        for key in all_keys_names
        {
            tmp := GetKeyState(key, "P")
            if (tmp) {
                physical := physical . " [" . key . "]"
            }
            tmp := GetKeyState(key)
            if (tmp) {
                logical := logical . " [" . key . "]"
            }
        }
        MsgBox "Pressed physical:`n" . physical . "`n" . "`nPressed Logical:`n" . logical
    }

; _____________________________________________________________________________/ }}}1

; === Double-func keys ===

; [Hotkeys] «`~» (uses HotIf to decide if layer = Text2) ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\ {{{1

    LShift & SC029::+SC029

    *$SC029:: ; «`~»
    {
        Send "{Blind}{LShift DownR}"
        KeyWait "SC029"
        Send "{Blind}{LShift up}"
        if(A_PriorKey != "``" or A_TimeSinceThisHotkey > single_tap_time_gap)
        {
            return
        }
        else {
            SetKeyDelay -1
            Send "{Blind}{SC029 DownR}"
            Sleep 10
            SetKeyDelay -1
            Send "{Blind}{SC029 up}"
        }
    }

	#HotIf	(GetKeyState("Space", "P") = 1 and !right_KB_half_recently_active)
	 
		LShift & SC029::Send ","

		*$SC029:: ; «`~»
		{
			Send "{Blind}{LShift DownR}"
			KeyWait "SC029"
			Send "{Blind}{LShift up}"
			if(A_PriorKey != "``" or A_TimeSinceThisHotkey > single_tap_time_gap)
			{
				return
			}
			else {
				Send "."
			}
		}
	#HotIf


; _____________________________________________________________________________/ }}}1
; [Hotkeys] «Space» ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\ {{{1

    *$Space::
    {
        if (right_KB_half_recently_active)
        {
            SetKeyDelay -1
            Send "{Blind}{Space DownR}"
        }
        else
        {
            KeyWait "Space"
            if (A_PriorKey != "Space" or A_TimeSinceThisHotkey > single_tap_time_gap)
            {
            ; HOLD Mode:
                return
            }
            else {
                SetKeyDelay -1
                Send "{Blind}{Space DownR}"
                Sleep 10
                SetKeyDelay -1
                Send "{Blind}{Space up}"
            }
        }
    }

; _____________________________________________________________________________/ }}}1
; [Hotkeys] «Tab» (+ AltTab handling) ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\ {{{1

    *$Tab::
    {
        if (GetKeyState("LAlt", "P")=1)
        {
            SetKeyDelay -1
            Send "{Blind}{Tab DownR}"
        }
        else
        {
            KeyWait "Tab"
            if(A_PriorKey != "Tab" or A_TimeSinceThisHotkey > single_tap_time_gap)
            { ; HOLD MODE:
                return
            }
            else {
                SetKeyDelay -1
                Send "{Blind}{Tab DownR}"
                Sleep 10
                SetKeyDelay -1
                Send "{Blind}{Tab Up}"
            }
        }
    }

; _____________________________________________________________________________/ }}}1
; [Hotkeys] «RAlt» ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\ {{{1

    *$RAlt:: {
		global
        register_kb_rightSide_activity()
    }

; _____________________________________________________________________________/ }}}1
; [Hotkeys] «F5» (for Capslock) ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\ {{{1

	$*F5:: {
		cur_layer := get_cur_layer()
		if (cur_layer = KB_Layers.Navi) {
			SetCapsLockState GetKeyState("CapsLock","T") ? "Off" : "On"
			SoundBeep 220, 100
		} else {
			Send "{Blind}{F5}"
		}
	}

; _____________________________________________________________________________/ }}}1

; === Main ===

; Doc on Hotkeys functions ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\ {{{1

	;=========================================================================================================================
    ; [Down]:                                       | User must ensure these args for [Up]:
    ;
    ; - "!+^{x" : Send "{Blind}!+^{x DownR}"        | "{x"  : Send "{Blind}{x Up}"
    ; - "{x"    : Send "{Blind}{x DownR}"           | "{x"  
    ;
    ; - "•x"    : Send "{x}"                        | "     : sends nothing     // Sps usage for Symbols on any layer
    ; - "✠!+{x" : Send "{Blind}<nv.md>!+{x DownR}"  | "{x"                      // Sps usage only for Navi-layer
    ; 
    ; - ""      : send nothing                      | ""                        // those 3 are different only for convenience
    ; - "XXX"   : send nothing                      | ""
    ; - "MOD"   : send nothing                      | ""
	;=========================================================================================================================

	; - Keys that are considered as MOD on Navi layer are given in send_DownR(...)
	; - For up-keys {Blind} is indeed required
	;   ( without it for example #3 (call program from task bar) unfocuses window called
	;   , due to sending masking Ctrl-up/Ctrl-down around «Win» or smth like that
	;   )

; _____________________________________________________________________________/ }}}1

; [F] get_cur_layer ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\ {{{1

    get_cur_layer()
    {
    global 
        space := GetKeyState("Space", "P") ? "Space_" : ""
        ralt  := GetKeyState("RAlt" , "P") ? "RAlt_"  : ""
        tab   := GetKeyState("Tab"  , "P") ? "Tab_"   : ""
        layers_mask := space . ralt . tab
        ;
        Switch layers_mask {
            case "":            layer := KB_Layers.Home
            case "Space_":      layer := (right_KB_half_recently_active) ? KB_Layers.Home : KB_Layers.Text2
            case "Space_Tab_":  layer := (right_KB_half_recently_active) ? KB_Layers.Home : KB_Layers.Text2withAlt
            case "Tab_":        layer := (right_KB_half_recently_active) ? KB_Layers.Home : KB_Layers.Navi
            case "RAlt_":       layer := KB_Layers.Navi
            default:            layer := KB_Layers.Error
        }
        return layer
    }

; _____________________________________________________________________________/ }}}1
; [T] timer_2hAlarm, [F] (un)register_kb_rightSide_activity ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\ {{{1

	register_kb_rightSide_activity() {
		global
		right_KB_half_recently_active := True
		guiF_visualise_2h()
		SetTimer timer_2hAlarm, alarm_2h_time_window
	}

	unregisster_kb_rightSide_activity() {
		global
        right_KB_half_recently_active := False
        guiF_visualise_1h()
	}

    timer_2hAlarm() {
		unregisster_kb_rightSide_activity()
    }

; _____________________________________________________________________________/ }}}1
; [F] send_DownR ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\ {{{1

    ; [String, Bool] -> String -> String -> String -> String | ...
	; see full docs where Hotkeys are assigned
    send_DownR(homeList, keyText2, keyText2Alt, keyNavi, keySmb) {
    global
    local keyHome, activate_2hAlarm, cur_layer, key
        ; variables unpacking: 
        keyHome := homeList[1]
        activate_2hAlarm := homelist[2]
        ;
        cur_layer := get_cur_layer()
        ; 
        If (activate_2hAlarm and (cur_layer = KB_Layers.Home)) {
			register_kb_rightSide_activity()
        }
        ; get key to analize:
        Switch cur_layer {
            case KB_Layers.Home :           key := keyHome
            case KB_Layers.Text2 :          key := keyText2
            case KB_Layers.Text2withAlt :   key := keyText2Alt
            case KB_Layers.Navi :           key := keyNavi
            case KB_Layers.Symbols :        key := keySmb
            default :                       key := "XXX"
        }
        ; analize key:
        if ((key = "XXX") or (key = "MOD") or (key = "")) {
            return
        } else if (SubStr(key, 1, 1) = "•") {
            Send "{" SubStr(key, 2) "}"
        } else if (SubStr(key, 1, 1) = "✠") {
            send_DownR_withNaviMods(SubStr(key, 2))
        } else { ; supposed here key can only be of form "!+{x" 
            Send "{Blind}" key " DownR}"
        }
    }

; _____________________________________________________________________________/ }}}1
; [F] send_DownR_withNaviMods ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\ {{{1

    ; String (smth like «!+{Left») -> | ...
    send_DownR_withNaviMods(key)
    {
        IS_Shift        := (GetKeyState("k","P")=1 or GetKeyState("1","P")=1) ? "+" : ""
        IS_Ctrl         := (GetKeyState("l","P")=1 or GetKeyState("2","P")=1) ? "^" : ""
        IS_Alt          := (GetKeyState(";","P")=1) ? "!" : ""
        IS_Win          := (GetKeyState("m","P")=1) ? "#" : ""
        IS_x5           := (GetKeyState("'","P")=1 or GetKeyState("3","P")=1) ? 5   : 1
        ; 
        mods_Mask       := IS_Shift . IS_Ctrl . IS_Alt . IS_Win
        keys_To_Send    := mods_Mask . key . " DownR}"
        ;
        Loop IS_x5
            Send "{Blind}" keys_To_Send 
    }

; _____________________________________________________________________________/ }}}1
; [F] send_Up ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\ {{{1

    ; String -> String -> String -> String -> String -> | ...
    send_Up(keyHome, keyText2, keyText2Alt, keyNavi, keySmb) {
        cur_layer := get_cur_layer()
        ; get key to analize:
        Switch cur_layer {
            case KB_Layers.Home :           key := keyHome
            case KB_Layers.Text2 :          key := keyText2
            case KB_Layers.Text2withAlt :   key := keyText2Alt
            case KB_Layers.Navi :           key := keyNavi
            case KB_Layers.Symbols :        key := keySmb
            default:                        key := ""
        }
        ; analize key:
        if (key = "") {
            return
        } else {
            Send "{Blind}" key " Up}"
        }
    }

; _____________________________________________________________________________/ }}}1

; [F] register_chordKey_DownR ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\ {{{1

	; Integer -> String -> String -> String -> String -> String | ...
    register_chordKey_DownR(n, keyHome, keyText2, keyText2Alt, keyNavi, keySmb) {
    global
        if (right_KB_half_recently_active or (get_cur_layer() != KB_Layers.Home))
        {
			send_DownR([keyHome, False], keyText2, keyText2Alt, keyNavi, keySmb)
        } else {
            if (chords_gatheringPhase = 0) {
                SetTimer chords_Timer, chords_time_window
                chords_gatheringPhase := 1
            }
            chords_keysPressed[n] := True
        }
        Return
    }

; _____________________________________________________________________________/ }}}1
; [T] chords_Timer ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\ {{{1

    chords_Timer() {
		global
		local m1, m2, m3, mask, cur_sleep
		; build mask:
		(chords_keysPressed[1] = True) ? m1 := "1" : m1 := "0"
		(chords_keysPressed[2] = True) ? m2 := "1" : m2 := "0"
		(chords_keysPressed[3] = True) ? m3 := "1" : m3 := "0"
		mask := m1 . m2 . m3
        Switch mask
        {
            case "100" : Send "{Blind}{s DownR}"
            case "010" : Send "{Blind}{d DownR}"
            case "001" : Send "{Blind}{t DownR}"
            case "011" :
                cur_sleep := start_sleep
                while (GetKeyState("d","P") and GetKeyState("f","P")) {
                    If (cur_sleep > end_sleep) {
                        cur_sleep := cur_sleep - step_sleep
					}
                    Send "{Blind}{Enter DownR}"
                    Sleep cur_sleep
                }
                Send "{Blind}{Enter up}"
            case "101" :
                cur_sleep := start_sleep
                while (GetKeyState("s","P") and GetKeyState("f","P")) {
                    If (cur_sleep > end_sleep) {
                        cur_sleep := cur_sleep - step_sleep
					}
                    Send "{Blind}{Del DownR}"
                    Sleep cur_sleep
                }
                Send "{Blind}{Del up}"
            case "110" :
                cur_sleep := start_sleep
                while (GetKeyState("d","P") and GetKeyState("s","P")) {
                    If (cur_sleep > end_sleep) {
                        cur_sleep := cur_sleep - step_sleep
					}
                    Send "{Blind}{BS DownR}"
                    Sleep cur_sleep
                }
                Send "{Blind}{BS up}"
            case "111" : False
        }
        chords_gatheringPhase := 0
        chords_keysPressed := [False, False, False]
	}

; _____________________________________________________________________________/ }}}1
; [F] register_chordKey_Up, [T] chords_Timer_i_up ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\ {{{1

	; curenntly it essentially does nothing, however it is a core for building tracking system

    ; Integer -> String -> String -> String -> String -> String -> | ...
    register_chordKey_Up(n, keyHome, keyText2, keyText2Alt, keyNavi, keySmb) {
		global
        Switch n {
            case 1: SetTimer chords_Timer_1_up, chords_time_window
            case 2: SetTimer chords_Timer_2_up, chords_time_window
            case 3: SetTimer chords_Timer_3_up, chords_time_window
        }
	}

    chords_Timer_1_up() {
        Send "{Blind}{s up}"
	}

    chords_Timer_2_up() {
        Send "{Blind}{d up}"
    }

    chords_Timer_3_up() {
        Send "{Blind}{t up}"

	}

; _____________________________________________________________________________/ }}}1

; [Hotkeys] DownR ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\ {{{1

                    ;(==["{Home====,======]=,"{Text2====,"{Text2A===,"{Navi=====,"{SymbolsL=)
                    ;   ►···►···►···►···►···►···►···►···►···►···►···►···►···►···►···►···►···►
  $*Enter::send_DownR(  ["{Enter"  , False] ,"XXX"      ,"XXX"      ,"✠!{Enter" ,"XXX"      )
                    ;   [----------, -----] , --------- , --------- , --------- , ---------
     *$F1::send_DownR(  ["{F1"     , False] ,"{F5"      ,"!{F1"     ,"✠{F9"     ,""         )
     *$F2::send_DownR(  ["{F2"     , False] ,"{F6"      ,"!{F2"     ,"✠{F10"    ,""         )
     *$F3::send_DownR(  ["{F3"     , False] ,"{F7"      ,"!{F3"     ,"✠{F11"    ,""         )
     *$F4::send_DownR(  ["{F4"     , False] ,"{F8"      ,"!{F4"     ,"✠{F12"    ,""         )
                    ;   [----------, -----] , --------- , --------- , --------- , ---------
      $*1::send_DownR(  ["{1"      , False] ,"{6"       ,"!{6"      ,"XXX"      ,""         )
      $*2::send_DownR(  ["{2"      , False] ,"{7"       ,"!{7"      ,"MOD"      ,""         )
      $*3::send_DownR(  ["{3"      , False] ,"{8"       ,"!{8"      ,"MOD"      ,""         )
      $*4::send_DownR(  ["{4"      , False] ,"{9"       ,"!{9"      ,"•Volume_Down"     ,"" )
      $*5::send_DownR(  ["{5"      , False] ,"{0"       ,"!{0"      ,"•Volume_Up"       ,"" )
      $*6::send_DownR(  ["{="      , False] ,"{-"       ,"!{-"      ,"•Media_Play_Pause","" )
      $*7::send_DownR(  ["{6"      , True ] ,"XXX"      ,"XXX"      ,"XXX"      ,""         )
      $*8::send_DownR(  ["{7"      , True ] ,"XXX"      ,"XXX"      ,"XXX"      ,""         )
      $*9::send_DownR(  ["{8"      , True ] ,"XXX"      ,"XXX"      ,"•₱"       ,""         )
      $*0::send_DownR(  ["{9"      , True ] ,"XXX"      ,"XXX"      ,"•§"       ,""         )
      $*-::send_DownR(  ["{0"      , True ] ,"XXX"      ,"XXX"      ,"•°"       ,""         )
      $*=::send_DownR(  ["{-"      , True ] ,"XXX"      ,"XXX"      ,"•—"       ,""         )
                    ;   [----------, -----] , --------- , --------- , --------- , ---------
      $*q::send_DownR(  ["{q"      , False] ,"{p"       ,"!{p"      ,"✠{Del"    ,""         )
      $*w::send_DownR(  ["{w"      , False] ,"{o"       ,"!{o"      ,"✠{Enter"  ,""         )
      $*e::send_DownR(  ["{e"      , False] ,"{i"       ,"!{i"      ,"✠{Up"     ,""         )
      $*r::send_DownR(  ["{r"      , False] ,"{u"       ,"!{u"      ,"✠{BS"     ,""         )
      $*t::send_DownR(  ["{f"      , False] ,"{y"       ,"!{y"      ,"XXX"      ,""         )
      $*y::send_DownR(  ["{\"      , False] ,"{SC01A"   ,"!{SC01A"  ,"✠{PgUp"   ,""         )
      $*u::send_DownR(  ["{y"      , True ] ,"XXX"      ,"XXX"      ,"XXX"      ,""         )
      $*i::send_DownR(  ["{u"      , True ] ,"XXX"      ,"XXX"      ,"XXX"      ,""         )
      $*o::send_DownR(  ["{i"      , True ] ,"XXX"      ,"XXX"      ,"•«"       ,""         )
      $*p::send_DownR(  ["{o"      , True ] ,"XXX"      ,"XXX"      ,"•»"       ,""         )
      $*[::send_DownR(  ["{p"      , True ] ,"XXX"      ,"XXX"      ,"••"       ,""         )
      $*]::send_DownR(  ["{SC01A"  , True ] ,"XXX"      ,"XXX"      ,"✠{Esc"    ,""         )
      $*\::send_DownR(  ["{SC01B"  , True ] ,"XXX"      ,"XXX"      ,"XXX"      ,""         )
                    ;   [----------, -----] , --------- , --------- , --------- , ---------
      $*a::send_DownR(  ["{a"      , False] ,"{SC027"   ,"!{SC027"  ,"✠{Home"   ,""         )
	  ;s
	  ;d
	  ;f
      $*g::send_DownR(  ["{g"      , False] ,"{h"       ,"!{h"      ,"✠{End"    ,""         )
      $*h::send_DownR(  ["{SC028"  , False] ,"{SC01B"   ,"!{SC01B"  ,"✠{PgDn"   ,""         )
      $*j::send_DownR(  ["{h"      , True ] ,"XXX"      ,"XXX"      ,"XXX"      ,""         )
      $*k::send_DownR(  ["{n"      , True ] ,"XXX"      ,"XXX"      ,"MOD"      ,""         )
      $*l::send_DownR(  ["{k"      , True ] ,"XXX"      ,"XXX"      ,"MOD"      ,""         )
     $*`;::send_DownR(  ["{l"      , True ] ,"XXX"      ,"XXX"      ,"MOD"      ,""         )
      $*'::send_DownR(  ["{SC027"  , True ] ,"XXX"      ,"XXX"      ,"MOD"      ,""         )
                    ;   [----------, -----] , --------- , --------- , --------- , ---------
      $*z::send_DownR(  ["{z"      , False] ,"{SC035"   ,"!{SC035"  ,"•AppsKey" ,""         )
      $*x::send_DownR(  ["{x"      , False] ,"{SC034"   ,"!{SC034"  ,"•←"       ,""         )
      $*c::send_DownR(  ["{c"      , False] ,"{SC033"   ,"!{SC033"  ,"•↓"       ,""         )
      $*v::send_DownR(  ["{v"      , False] ,"{m"       ,"!{m"      ,"•→"       ,""         )
      $*b::send_DownR(  ["{b"      , False] ,"{j"       ,"!{j"      ,"•↑"       ,""         )
      $*n::send_DownR(  ["{SC035"  , False] ,""         ,""         ,"XXX"      ,""         )
      $*m::send_DownR(  ["{j"      , True ] ,""         ,""         ,"XXX"      ,""         )
      $*,::send_DownR(  ["{m"      , True ] ,""         ,""         ,"✠{Space"  ,""         )
      $*.::send_DownR(  ["{SC033"  , True ] ,""         ,""         ,"✠{Del"    ,""         )
      $*/::send_DownR(  ["{SC034"  , True ] ,""         ,""         ,"✠{Tab"    ,""         )

; _____________________________________________________________________________/ }}}1
; [Hotkeys] Up ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\ {{{1

                    ;(==["{Home=====,"{Text2====,"{Text2A===,"{Navi=====,"{SymbolsL=)
                    ;   ►···►···►···►···►···►···►···►···►···►···►···►···►···►···►···►
  $*Enter up::send_Up(   "{Enter"   ,""         ,"{Enter"   ,"{Enter"   ,""         )
                    ;    ---------- , --------- , --------- , --------- , ---------
     *$F1 up::send_Up(   "{F1"      ,"{F1"      ,"{F9"      ,"{F9"      ,""         )
     *$F2 up::send_Up(   "{F2"      ,"{F2"      ,"{F10"     ,"{F10"     ,""         )
     *$F3 up::send_Up(   "{F3"      ,"{F3"      ,"{F11"     ,"{F11"     ,""         )
     *$F4 up::send_Up(   "{F4"      ,"{F4"      ,"{F12"     ,"{F12"     ,""         )
                    ;    ---------- , --------- , --------- , --------- , ---------
      $*1 up::send_Up(   "{1"       ,"{6"       ,""         ,""         ,""         )
      $*2 up::send_Up(   "{2"       ,"{7"       ,""         ,""         ,""         )
      $*3 up::send_Up(   "{3"       ,"{8"       ,""         ,""         ,""         )
      $*4 up::send_Up(   "{4"       ,"{9"       ,""         ,""         ,""         )
      $*5 up::send_Up(   "{5"       ,"{0"       ,""         ,""         ,""         )
      $*6 up::send_Up(   "{="       ,"{-"       ,""         ,""         ,""         )
      $*7 up::send_Up(   "{6"       ,""         ,""         ,""         ,""         )
      $*8 up::send_Up(   "{7"       ,""         ,""         ,""         ,""         )
      $*9 up::send_Up(   "{8"       ,""         ,""         ,""         ,""         )
      $*0 up::send_Up(   "{9"       ,""         ,""         ,""         ,""         )
      $*- up::send_Up(   "{0"       ,""         ,""         ,""         ,""         )
      $*= up::send_Up(   "{-"       ,""         ,""         ,""         ,""         )
                    ;    ---------- , --------- , --------- , --------- , ---------
      $*q up::send_Up(   "{q"       ,"{p"       ,""         ,"{Del"     ,""         )
      $*w up::send_Up(   "{w"       ,"{o"       ,""         ,"{Enter"   ,""         )
      $*e up::send_Up(   "{e"       ,"{i"       ,""         ,"{Up"      ,""         )
      $*r up::send_Up(   "{r"       ,"{u"       ,""         ,"{BS"      ,""         )
      $*t up::send_Up(   "{f"       ,"{y"       ,""         ,""         ,""         )
      $*y up::send_Up(   "{\"       ,"{SC01A"   ,""         ,"{PgUp"    ,""         )
      $*u up::send_Up(   "{y"       ,""         ,""         ,""         ,""         )
      $*i up::send_Up(   "{u"       ,""         ,""         ,""         ,""         )
      $*o up::send_Up(   "{i"       ,""         ,""         ,""         ,""         )
      $*p up::send_Up(   "{o"       ,""         ,""         ,""         ,""         )
      $*[ up::send_Up(   "{p"       ,""         ,""         ,""         ,""         )
      $*] up::send_Up(   "{SC01A"   ,""         ,""         ,"{Esc"     ,""         )
      $*\ up::send_Up(   "{SC01B"   ,""         ,""         ,""         ,""         )

      $*a up::send_Up(   "{a"       ,"{SC027"   ,""         ,"{Home"    ,""         )
	  ;s
	  ;d
	  ;f
      $*g up::send_Up(   "{g"       ,"{h"       ,""         ,"{End"     ,""         )
      $*h up::send_Up(   "{SC028"   ,"{SC01B"   ,""         ,"{PgDn"    ,""         )
      $*j up::send_Up(   "{h"       ,""         ,""         ,""         ,""         )
      $*k up::send_Up(   "{n"       ,""         ,""         ,""         ,""         )
      $*l up::send_Up(   "{k"       ,""         ,""         ,""         ,""         )
     $*`; up::send_Up(   "{l"       ,""         ,""         ,""         ,""         )
      $*' up::send_Up(   "{SC027"   ,""         ,""         ,""         ,""         )
                    ;    ---------- , --------- , --------- , --------- , ---------
      $*z up::send_Up(   "{z"       ,"{SC035"   ,""         ,""         ,""         )
      $*x up::send_Up(   "{x"       ,"{SC034"   ,""         ,""         ,""         )
      $*c up::send_Up(   "{c"       ,"{SC033"   ,""         ,""         ,""         )
      $*v up::send_Up(   "{v"       ,"{m"       ,""         ,""         ,""         )
      $*b up::send_Up(   "{b"       ,"{j"       ,""         ,""         ,""         )
      $*n up::send_Up(   "{SC035"   ,""         ,""         ,""         ,""         )
      $*m up::send_Up(   "{j"       ,""         ,""         ,""         ,""         )
      $*, up::send_Up(   "{m"       ,""         ,""         ,"{Space"   ,""         )
      $*. up::send_Up(   "{SC033"   ,""         ,""         ,"{Del"     ,""         )
      $*/ up::send_Up(   "{SC034"   ,""         ,""         ,"{Tab"     ,""         )

; _____________________________________________________________________________/ }}}1
; [Hotkeys] Chords ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\ {{{1

	$*s::register_chordKey_DownR(1	,"{s"	,"{l"       ,"!{l"      ,"✠{Left"   ,""         )
	$*d::register_chordKey_DownR(2	,"{d"	,"{k"       ,"!{k"      ,"✠{Down"   ,""         )
	$*f::register_chordKey_DownR(3	,"{t"	,"{n"       ,"!{n"      ,"✠{Right"  ,""         )

	$*s up::register_chordKey_Up(1	,"{s"	,"{l"    ,""	,"{Left"   ,""         )
	$*d up::register_chordKey_Up(2	,"{d"	,"{k"    ,""	,"{Down"   ,""         )
	$*f up::register_chordKey_Up(3	,"{t"	,"{n"    ,""	,"{Right"  ,""         )

; _____________________________________________________________________________/ }}}1

; Beep (on GUI Launch) ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\ {{{1

	; Beep when app is loaded:
    SoundBeep 440, 100
    SoundBeep 560, 100
    SoundBeep 680, 100

; _____________________________________________________________________________/ }}}1

